{"remainingRequest":"/Users/leonard.gonsalves/aws/nims2/Flask-Scaffold/app/templates/static/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/leonard.gonsalves/aws/nims2/Flask-Scaffold/app/templates/static/node_modules/@ng-bootstrap/ng-bootstrap/util/scrollbar.js","dependencies":[{"path":"/Users/leonard.gonsalves/aws/nims2/Flask-Scaffold/app/templates/static/node_modules/@ng-bootstrap/ng-bootstrap/util/scrollbar.js","mtime":499162500000},{"path":"/Users/leonard.gonsalves/aws/nims2/Flask-Scaffold/app/templates/static/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/leonard.gonsalves/aws/nims2/Flask-Scaffold/app/templates/static/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Injectable, Inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nvar noop = function () { };\nvar ɵ0 = noop;\n/**\n * Utility to handle the scrollbar.\n *\n * It allows to compensate the lack of a vertical scrollbar by adding an\n * equivalent padding on the right of the body, and to remove this compensation.\n */\nvar ScrollBar = /** @class */ /*@__PURE__*/ (function () {\n    function ScrollBar(_document) {\n        this._document = _document;\n    }\n    /**\n     * Detects if a scrollbar is present and if yes, already compensates for its\n     * removal by adding an equivalent padding on the right of the body.\n     *\n     * @return a callback used to revert the compensation (noop if there was none,\n     * otherwise a function removing the padding)\n     */\n    /**\n       * Detects if a scrollbar is present and if yes, already compensates for its\n       * removal by adding an equivalent padding on the right of the body.\n       *\n       * @return a callback used to revert the compensation (noop if there was none,\n       * otherwise a function removing the padding)\n       */\n    ScrollBar.prototype.compensate = /**\n       * Detects if a scrollbar is present and if yes, already compensates for its\n       * removal by adding an equivalent padding on the right of the body.\n       *\n       * @return a callback used to revert the compensation (noop if there was none,\n       * otherwise a function removing the padding)\n       */\n        function () { return !this._isPresent() ? noop : this._adjustBody(this._getWidth()); };\n    /**\n     * Adds a padding of the given width on the right of the body.\n     *\n     * @return a callback used to revert the padding to its previous value\n     */\n    /**\n       * Adds a padding of the given width on the right of the body.\n       *\n       * @return a callback used to revert the padding to its previous value\n       */\n    ScrollBar.prototype._adjustBody = /**\n       * Adds a padding of the given width on the right of the body.\n       *\n       * @return a callback used to revert the padding to its previous value\n       */\n        function (width) {\n            var body = this._document.body;\n            var userSetPadding = body.style.paddingRight;\n            var paddingAmount = parseFloat(window.getComputedStyle(body)['padding-right']);\n            body.style['padding-right'] = paddingAmount + width + \"px\";\n            return function () { return body.style['padding-right'] = userSetPadding; };\n        };\n    /**\n     * Tells whether a scrollbar is currently present on the body.\n     *\n     * @return true if scrollbar is present, false otherwise\n     */\n    /**\n       * Tells whether a scrollbar is currently present on the body.\n       *\n       * @return true if scrollbar is present, false otherwise\n       */\n    ScrollBar.prototype._isPresent = /**\n       * Tells whether a scrollbar is currently present on the body.\n       *\n       * @return true if scrollbar is present, false otherwise\n       */\n        function () {\n            var rect = this._document.body.getBoundingClientRect();\n            return rect.left + rect.right < window.innerWidth;\n        };\n    /**\n     * Calculates and returns the width of a scrollbar.\n     *\n     * @return the width of a scrollbar on this page\n     */\n    /**\n       * Calculates and returns the width of a scrollbar.\n       *\n       * @return the width of a scrollbar on this page\n       */\n    ScrollBar.prototype._getWidth = /**\n       * Calculates and returns the width of a scrollbar.\n       *\n       * @return the width of a scrollbar on this page\n       */\n        function () {\n            var measurer = this._document.createElement('div');\n            measurer.className = 'modal-scrollbar-measure';\n            var body = this._document.body;\n            body.appendChild(measurer);\n            var width = measurer.getBoundingClientRect().width - measurer.clientWidth;\n            body.removeChild(measurer);\n            return width;\n        };\n    return ScrollBar;\n}());\nexport { ScrollBar };\nexport { ɵ0 };\n//# sourceMappingURL=scrollbar.js.map\n",null]}